<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Prescription Entry</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <link rel="icon" href="images/medicine.png">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(to right, #f7f1e3, #ffffff);
      margin: 0;
      padding: 30px;
    }
    .container {
      max-width: 1000px;
      margin: auto;
      background: #64bbfd;
      padding: 25px;
      border-radius: 16px;
      box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }
    h2 {
      text-align: center;
      color: #ffffff;
      margin-bottom: 20px;
    }
    h3 {
      color: #ffffff;
      margin-bottom: 10px;
    }
    .input-group {
      margin-bottom: 15px;
    }
    label {
      font-weight: 500;
      margin-bottom: 6px;
      display: block;
    }
    input, select, textarea {
      padding: 10px;
      width: 100%;
      border-radius: 8px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    .form-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }
    .left-column, .right-column {
      flex: 1;
      min-width: 300px;
    }
    .medicine-entry {
      background: #f1f8ff;
      padding: 15px;
      border-radius: 10px;
      margin-bottom: 15px;
      position: relative;
    }
    .medicine-entry button.remove-med {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #e53935;
      color: white;
      border: none;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      font-weight: bold;
      cursor: pointer;
      line-height: 25px;
      text-align: center;
      padding: 0;
    }
    .medicine-entry button.remove-med:hover {
      background: #c62828;
    }
    button {
      padding: 12px;
      width: 100%;
      margin-top: 10px;
      background: #1565c0;
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 1rem;
      cursor: pointer;
      box-sizing: border-box;
    }
    button:hover {
      background: #0d47a1;
    }
    .medicine-management-buttons, .dosage-management-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 15px;
      margin-top: 20px;
    }
    .medicine-management-buttons button, .dosage-management-buttons button {
      flex: 1;
      min-width: 150px;
      font-size: 0.9rem;
      padding: 10px;
      margin-top: 0;
    }
    button.add-med-btn { background: #4caf50; }
    button.add-med-btn:hover { background: #388e3c; }
    button.add-new-med-btn { background: #2196f3; }
    button.add-new-med-btn:hover { background: #1976d2; }
    button.delete-med-btn { background: #f44336; }
    button.delete-med-btn:hover { background: #d32f2f; }
    button.add-dosage-btn { background: #ff9800; }
    button.add-dosage-btn:hover { background: #f57c00; }
    button.delete-dosage-btn { background: #f44336; }
    button.delete-dosage-btn:hover { background: #d32f2f; }
    .back-button {
      display: inline-block;
      margin-bottom: 20px;
      text-decoration: none;
      background-color: #0d47a1;
      color: white;
      padding: 10px 15px;
      border-radius: 8px;
    }
    .back-button:hover {
      background-color: #1565c0;
    }
    .tapering-section {
      margin-top: 10px;
      padding: 10px;
      background: #e3f2fd;
      border-radius: 8px;
      display: none;
    }
    .tapering-row {
      display: flex;
      gap: 10px;
      margin-bottom: 8px;
      align-items: center;
    }
    .tapering-row select, .tapering-row input {
      flex: 1;
      padding: 8px;
    }
    .tapering-toggle {
      display: flex;
      align-items: center;
      margin-top: 8px;
      cursor: pointer;
    }
    .tapering-toggle input {
      width: auto;
      margin-right: 8px;
    }
    .add-tapering {
      background: #4caf50;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 5px;
      width: auto;
    }
    .remove-tapering {
      background: #f44336;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      cursor: pointer;
      padding: 0;
      line-height: 20px;
      text-align: center;
      width: auto;
    }
    .medicine-list-container {
      background: #f1f8ff;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      max-height: 150px;
      overflow-y: auto;
    }
    .medicine-list-container ul {
      margin: 0;
      padding-left: 20px;
      color: #333;
    }
  </style>
</head>
<body>

<a href="/dashboard" class="back-button">‚Üê Back to Dashboard</a>

<div class="container">
  <h2>üìù PRESCRIPTION ENTRY</h2>

  <div class="form-grid">
    <div class="left-column">
      <div class="input-group">
        <label>Patient Name:</label>
        <input id="pname" type="text" list="nameList" />
        <datalist id="nameList"></datalist>
      </div>

      <div class="input-group">
        <label>Mobile Number:</label>
        <input id="pmobile" type="text" />
      </div>

      <div class="input-group">
        <label>Age:</label>
        <input id="page" type="text" />
      </div>

      <div class="input-group">
        <label>Diagnosis:</label>
        <input id="pdiagnosis" type="text" list="diagnosisList" />
        <datalist id="diagnosisList">
          <option value="Fever (Pyrexia)">
          <option value="Common Cold">
          <option value="Cough">
          <option value="Sore Throat">
          <option value="Upper Respiratory Tract Infection (URTI)">
          <option value="Lower Respiratory Tract Infection (LRTI)">
          <option value="Pneumonia">
          <option value="Asthma">
          <option value="Bronchitis">
          <option value="Allergic Rhinitis">
          <option value="COVID-19">
          <option value="Tuberculosis (TB)">
          <option value="Hypertension (High Blood Pressure)">
          <option value="Hypotension (Low Blood Pressure)">
          <option value="Diabetes Mellitus">
          <option value="Thyroid Disorder">
          <option value="Hypothyroidism">
          <option value="Hyperthyroidism">
          <option value="Gastritis">
          <option value="GERD (Acid Reflux)">
          <option value="Constipation">
          <option value="Diarrhea">
          <option value="Irritable Bowel Syndrome (IBS)">
          <option value="Ulcerative Colitis">
          <option value="Peptic Ulcer Disease">
          <option value="Abdominal Pain">
          <option value="Dyspepsia">
          <option value="Urinary Tract Infection (UTI)">
          <option value="Kidney Stone (Renal Calculi)">
          <option value="Dengue Fever">
          <option value="Chikungunya">
          <option value="Malaria">
          <option value="Typhoid Fever">
          <option value="Jaundice (Hepatitis)">
          <option value="Anemia">
          <option value="Migraine">
          <option value="Headache">
          <option value="Vertigo">
          <option value="Depression">
          <option value="Anxiety Disorder">
          <option value="Insomnia">
          <option value="Skin Rash / Allergy">
          <option value="Eczema">
          <option value="Psoriasis">
          <option value="Acne Vulgaris">
          <option value="Scabies">
          <option value="Fungal Infection">
          <option value="Back Pain">
          <option value="Neck Pain">
          <option value="Joint Pain">
          <option value="Arthritis">
          <option value="Osteoarthritis">
          <option value="Rheumatoid Arthritis">
          <option value="Gout">
          <option value="Fracture / Injury">
          <option value="Menstrual Disorder">
          <option value="PCOS">
          <option value="Pregnancy (Antenatal Checkup)">
          <option value="Urinary Incontinence">
          <option value="Vaginal Discharge">
          <option value="Dental Pain">
          <option value="Eye Infection">
          <option value="Ear Pain / Otitis Media">
          <option value="Sinusitis">
          <option value="Allergic Conjunctivitis">
          <option value="Obesity">
          <option value="General Checkup / Health Screening">
        </datalist>
      </div>

      <div class="input-group">
        <label>Register Number:</label>
        <input id="pregno" type="text" />
      </div>

      <div class="input-group">
        <label>Attender Name:</label>
        <input id="attender" type="text" list="attenderList" />
        <datalist id="attenderList"></datalist>
      </div>
    </div>

    <div class="right-column">
      <div class="input-group">
        <label>SpO‚ÇÇ:</label>
        <input id="spo2" type="text" />
      </div>
      <div class="input-group">
        <label>Weight:</label>
        <input id="weight" type="text" />
      </div>
      <div class="input-group">
        <label>Blood Pressure:</label>
        <input id="bp" type="text" />
      </div>
      <div class="input-group">
        <label>Pulse:</label>
        <input id="pulse" type="text" />
      </div>
      <div class="input-group">
        <label>Temperature:</label>
        <input id="temp" type="text" />
      </div>
      <div class="input-group">
        <label>Lab Test:</label>
        <input id="labtest" type="text" list="labTestList" placeholder="Select or enter lab test(s)" />
        <datalist id="labTestList">
          <option value="CBE - Complete Blood Examination">
          <option value="CBP - Complete Blood Picture">
          <option value="RFT - Renal Function Test">
          <option value="LFT - Liver Function Test">
          <option value="Blood Sugar - FBS/PPBS/RBS">
          <option value="HbA1c - Glycated Hemoglobin">
          <option value="TSH - Thyroid Stimulating Hormone">
          <option value="T3 T4 TSH Panel">
          <option value="Urine Routine">
          <option value="Stool Routine">
          <option value="Lipid Profile">
          <option value="ECG">
          <option value="X-Ray Chest PA View">
          <option value="Ultrasound Abdomen">
          <option value="CT Scan - Brain">
          <option value="MRI Spine">
          <option value="Vitamin D">
          <option value="Vitamin B12">
          <option value="ESR - Erythrocyte Sedimentation Rate">
          <option value="CRP - C-Reactive Protein">
          <option value="COVID-19 RT-PCR">
        </datalist>
      </div>
      <div class="input-group">
        <label>Lab Report:</label>
        <input id="labreport" type="text" list="labReportList" placeholder="Select or enter lab report(s)" />
        <datalist id="labReportList">
          <option value="Normal">
          <option value="Abnormal">
          <option value="Pending">
          <option value="Elevated WBC Count">
          <option value="Low Hemoglobin">
          <option value="High Blood Sugar">
          <option value="Elevated Creatinine">
          <option value="Abnormal Liver Enzymes">
          <option value="Positive COVID-19">
          <option value="Negative">
          <option value="Inconclusive">
          <option value="High Cholesterol">
          <option value="Low Vitamin D">
          <option value="Bacterial Infection Detected">
          <option value="Viral Markers Present">
        </datalist>
      </div>
    </div>
  </div>

  <div id="medicine-section">
    <h3>Medicines</h3>
    <div class="medicine-management-buttons">
      <button class="add-med-btn" onclick="addMedicine()">‚ûï Add Medicine Entry</button>
      <button class="add-new-med-btn" onclick="addNewMedicine()">‚ûï Add New Medicine Name</button>
      <button class="delete-med-btn" onclick="deleteMedicineName()">‚ûñ Delete Medicine Name</button>
    </div>
    <div class="medicine-list-container">
      <label>Current Medicine Names:</label>
      <ul id="medicineNameList"></ul>
    </div>
    <div class="dosage-management-buttons">
      <button class="add-dosage-btn" onclick="addNewDosage()">‚ûï Add New Dosage</button>
      <button class="delete-dosage-btn" onclick="deleteDosage()">‚ûñ Delete Dosage</button>
    </div>
    <div class="med-list" id="medicine-container">
      <datalist id="medicineOptions"></datalist>
    </div>
  </div>

  <button onclick="savePrescription()">üíæ Save Prescription</button>
  <button onclick="saveAndViewPrescription()">üëÅÔ∏è Save & View Prescription</button>
</div>

<script>
  // --- Global Lists & Constants ---
  let dosageList = [
    "¬Ω tab", "1 tab", "2 tab",
    "1-0-1", "1-1-0", "1-0-0", "0-1-0", "1-1-1", "0-0-1",
    "1/2-1/2-1/2", "1/2-0-1/2", "0-0-1/2", "1/2-0-0"
  ];

  const typeList = ["Tablet", "Capsule", "Syrup", "Injection", "Ointment", "Drops", "Suspension", "Cream", "Gel", "Lotion", "Inhaler", "Respule", "Patch", "Powder", "Sachet", "Suppository", "Mouth Wash", "Soap", "Shampoo"];
  const remarkList = ["Before Food", "After Food", "With Water", "With Milk", "DTTD", "SOS", "STAT", "Empty Stomach", "At Bedtime", "Continue", "Stop", "Review After", "Apply Locally"];

  const fieldHistories = {
    pname: "history_names",
    pdiagnosis: "history_diagnosis",
    attender: "history_attenders"
  };

  const medicineListStorageKey = "medicineNamesList";

  const defaultMedicineNames = [
    "Paracetamol", "Amoxicillin", "Ciprofloxacin", "Azithromycin", "Ibuprofen",
    "Metformin", "Amlodipine", "Losartan", "Atorvastatin", "Omeprazole",
    "Pantoprazole", "Levothyroxine", "Salbutamol", "Montelukast", "Doxycycline",
    "Multivitamin", "Calcium + Vitamin D3", "Clopidogrel", "Hydrochlorothiazide",
    "Telmisartan", "Glimepiride", "Glibenclamide", "Domperidone", "Ondansetron",
    "Rabeprazole", "Ranitidine", "Tramadol", "Cetirizine", "Loratadine",
    "Fexofenadine", "Metronidazole", "Tinidazole", "Albendazole", "Ivermectin",
    "Fluconazole", "Betamethasone", "Prednisolone", "Dexamethasone", "Vitamin B Complex",
    "Iron + Folic Acid", "Insulin", "Thyronorm", "Erythromycin", "Linezolid",
    "Meropenem", "Piperacillin + Tazobactam", "Amikacin", "Gentamicin", "Tetracycline",
    "Chlorpheniramine", "Phenylephrine", "Acetaminophen", "Naproxen", "Diclofenac",
    "Ketorolac", "Aceclofenac", "Nimesulide", "Budesonide", "Beclomethasone",
    "Mometasone", "Loperamide", "Bisacodyl", "Lactulose", "Sodium Bicarbonate",
    "Magaldrate + Simethicone", "Gaviscon", "Azee 250", "Montek LC", "Inj Diclofenac Sodium 25mg/ml",
    "SKELTAB D (metaxalone,diclofenac)", "NERVACE G", "ENZYMIN", "COFTIME SYP", "PANTOPRAZOLE 40MG",
    "ITROMED 200 MG", "MICOGEL CREAM", "Omnix 100", "ONDEM", "VASOGRAIN",
    "FLUNARAZINE", "MOXIKIND CV 625", "MOXIKIND CV 375", "ASTHARID EXPECTORANT SYP", "OTOFIT E/D",
    "Dolo 650 mg", "NEUROBION FORTE", "Orogard Mouth Wash", "Azee 100mg SUS", "Montek LC KID",
    "STEMETIL MD", "PANTOPRAZOL 40", "PANTOPRAZOL DSR", "UDAPA", "EVION 400 CAP",
    "AZITHROMYCIN 500MG", "AZITHROMYCIN 250MG", "Omnix 200", "BROMO SYP", "Syr Moxclav BD 228.5mg",
    "AMBRODIL-S SYRUP", "MOXIKIND-CV DRY SYRUP", "MOXIKIND-CV FORTE DRY SYRUP", "HISTIN 24", "HICET-AX",
    "OXINA NASAL DROPS", "ALBENDAZOLE SUSP. STRENGTH 200MG/5ML", "CIPLOX EYE DROPS", "OXINA P NASAL DROPS",
    "SUFRECOF D COUGH SYP", "PARACETAMOL 500MG", "PARACETAMOL 650", "Doxycycline Hyclate Cap. Strength 100mg",
    "CHESCLAR", "CHESCLAR DM", "CARMICIDE-A", "OPEC 20", "Budecort 0.5mg Respules 2ml",
    "MEFTAL 250MG", "OPEC 20 MG", "PERIMETHRIN SOAP", "HUMAN MIXTARD 70/30 INJECTION L", "KETO SOAP",
    "KETOSCALP POWDER", "PROLOMET 25MG", "BENDEX", "BENDEX 200MG SUSPENSION", "CLOTRIMAZOLE MOUTH PAINT",
    "CHYMORAL FORTE", "CIPLOX-D EYE AND EAR DROPS", "TBN DROPS", "DOXYNEC 100 CAP", "AMOXYCILLINE100MG/1ML DROPS",
    "CLEARWAX EAR DROPS", "DEXACHLOR E/E DROPS", "CANDID EAR DROPS", "MEGAHEAL OINTMENT", "MUPIROCIN OINTMENT",
    "T-BACT 2% OINTMENT", "NACRID GEL", "FLUSID CREAM", "FLUSID B CREAM", "DERMOLAM SKIN OINTMENT",
    "TERBINAFIN CREAM STRENGTH 1% W/W", "MEGASEPT-N", "Aldactone Tablet", "FEBREX PLUS DROPS", "NOCOLD DROP",
    "AZEE 500", "MEBEX", "Meftal 500 Tablet", "SHELCAL", "FEBREX PLUS AF ORAL DROPS",
    "CEPHELEXIN 250", "Ondem Injection", "Sucrafil Suspension Sugar Free", "PARACETAMOL 125", "Pantocid DSR Capsule",
    "WYSOLONE 10", "WYSOLONE 10MG", "PREDNISOLONE SYP", "Nicardia Retard 20 Tablet SR", "OROGARD MOUTH WASH",
    "RANTAC SYRUP", "ZIN SYP", "KETOKEM SHAMPOO", "ICHTHAMOL GLYCERIN", "ACICLOVIR",
    "BENDEX 400 TABLET", "DYTOR 10", "DIPTASE-MR", "DERIPHYLLIN INJECTION", "HICET-DC",
    "ALERID-D", "LEVOFLOX 500", "Ketovate Soap", "DERIPHYLLINE TABLET", "Montair 10 Tablet",
    "Azee 200mg Dry Syrup", "Hexidine Mouth Wash", "CILAGARD", "CILAGARD10MG", "Meftal Spas",
    "UDILIV 150", "ECOSPRIN AV 75/10", "ALDACTONE 25", "Phexin 250mg Redisyp Banana", "Telma 40 Tablet",
    "DEXORANGE PD", "BENDEX 400", "METOLAR", "THYRONORM 25", "Atarax 25mg", "SEPTID D"
  ];

  // --- Local Storage Helper Functions ---
  function getStoredMedicineNames() {
    const stored = localStorage.getItem(medicineListStorageKey);
    if (stored) {
      try {
        return JSON.parse(stored);
      } catch (e) {
        console.error("Error parsing stored medicine names:", e);
        return [...defaultMedicineNames];
      }
    } else {
      return [...defaultMedicineNames];
    }
  }

  function saveMedicineNames(names) {
    names.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
    localStorage.setItem(medicineListStorageKey, JSON.stringify(names));
  }

  // --- Populate Datalists and Load History ---
  window.onload = function() {
    const selectedPatient = JSON.parse(localStorage.getItem("selectedPatient"));
    if (selectedPatient) {
      document.getElementById("pname").value = selectedPatient.name || "";
      document.getElementById("pmobile").value = selectedPatient.mobile || "";
      document.getElementById("page").value = selectedPatient.age || "";
    }
    loadHistory();
    loadMedicineOptions();
  };

  function loadHistory() {
    for (let field in fieldHistories) {
      const datalist = document.getElementById(field + "List");
      if (datalist) {
        const data = JSON.parse(localStorage.getItem(fieldHistories[field]) || "[]");
        datalist.innerHTML = data.map(val => `<option value="${val}">`).join("");
      }
    }
  }

  function loadMedicineOptions() {
    const medicineOptionsDatalist = document.getElementById("medicineOptions");
    const medicineNameList = document.getElementById("medicineNameList");
    const currentMedicineNames = getStoredMedicineNames();
    
    // Populate datalist for medicine input
    medicineOptionsDatalist.innerHTML = currentMedicineNames
      .map(name => `<option value="${name}">`)
      .join('');
    
    // Populate visible medicine list
    medicineNameList.innerHTML = currentMedicineNames
      .map(name => `<li>${name}</li>`)
      .join('');
  }

  // --- Medicine Entry Management ---
  function addMedicine(med = {}) {
    const medDiv = document.createElement("div");
    medDiv.className = "medicine-entry";
    const uniqueId = `tapering-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;

    medDiv.innerHTML = `
      <button type="button" class="remove-med" onclick="this.parentElement.remove()">√ó</button>
      <label>Medicine Name:</label>
      <input class="med-name" type="text" list="medicineOptions" value="${med.name || ''}" />
      <label>Type:</label>
      <select class="med-type">
        ${typeList.map(t => `<option value="${t}" ${med.type === t ? 'selected' : ''}>${t}</option>`).join('')}
      </select>
      <label>Dosage:</label>
      <select class="med-dose">
        ${dosageList.map(d => `<option value="${d}" ${med.dosage === d ? 'selected' : ''}>${d}</option>`).join('')}
      </select>
      <label>Days:</label>
      <input class="med-qty" type="number" value="${med.quantity || 1}" min="0" />
      <label>Remark:</label>
      <input class="med-remark" type="text" list="remarkList" value="${med.remark || ''}" />
      <datalist id="remarkList">
        ${remarkList.map(r => `<option value="${r}">`).join('')}
      </datalist>
      <label>Additional Content:</label>
      <textarea class="med-content" rows="3" placeholder="Enter additional content for the medicine (e.g., specific instructions)">${med.content || ''}</textarea>
      <div class="tapering-toggle">
        <input type="checkbox" class="tapering-checkbox" id="${uniqueId}" ${med.tapering ? 'checked' : ''} onchange="toggleTapering(this)">
        <label for="${uniqueId}">Tapering Required</label>
      </div>
      <div class="tapering-section" ${med.tapering ? 'style="display:block;"' : ''}>
        <div class="tapering-entries">
          ${med.tapering ? med.tapering.map(t => `
            <div class="tapering-row">
              <select class="taper-dose">
                ${dosageList.map(d => `<option value="${d}" ${t.dosage === d ? 'selected' : ''}>${d}</option>`).join('')}
              </select>
              <input class="taper-days" type="number" placeholder="Days" value="${t.days || ''}" min="1" />
              <button type="button" class="remove-tapering" onclick="removeTaperingRow(this)">√ó</button>
            </div>
          `).join('') : ''}
        </div>
        <button type="button" class="add-tapering" onclick="addTaperingRow(this)">+ Add Tapering Step</button>
      </div>
    `;
    document.getElementById("medicine-container").appendChild(medDiv);
  }

  function toggleTapering(checkbox) {
    const taperingSection = checkbox.closest('.medicine-entry').querySelector('.tapering-section');
    if (taperingSection) {
      taperingSection.style.display = checkbox.checked ? 'block' : 'none';
    }
  }

  function addTaperingRow(button) {
    const taperingEntries = button.closest('.tapering-section').querySelector('.tapering-entries');
    const newRow = document.createElement('div');
    newRow.className = 'tapering-row';
    newRow.innerHTML = `
      <select class="taper-dose">
        ${dosageList.map(d => `<option value="${d}">${d}</option>`).join('')}
      </select>
      <input class="taper-days" type="number" placeholder="Days" min="1" />
      <button type="button" class="remove-tapering" onclick="removeTaperingRow(this)">√ó</button>
    `;
    taperingEntries.appendChild(newRow);
  }

  function removeTaperingRow(button) {
    button.closest('.tapering-row').remove();
  }

  function addNewMedicine() {
    const newMedicineName = prompt("Enter the name of the new medicine:");
    if (newMedicineName && newMedicineName.trim() !== "") {
      const trimmedName = newMedicineName.trim();
      let currentMedicineNames = getStoredMedicineNames();
      if (currentMedicineNames.some(name => name.toLowerCase() === trimmedName.toLowerCase())) {
        alert(`Medicine "${trimmedName}" already exists in the list.`);
        return;
      }
      currentMedicineNames.push(trimmedName);
      saveMedicineNames(currentMedicineNames);
      loadMedicineOptions();
      alert(`New medicine "${trimmedName}" added to the list.`);
    } else if (newMedicineName !== null) {
      alert("Please enter a valid medicine name.");
    }
  }

  function deleteMedicineName() {
    const nameToDelete = prompt("Enter the exact name of the medicine to delete (case-insensitive):");
    if (nameToDelete && nameToDelete.trim() !== "") {
      const trimmedName = nameToDelete.trim();
      let currentMedicineNames = getStoredMedicineNames();
      const initialLength = currentMedicineNames.length;
      currentMedicineNames = currentMedicineNames.filter(name => name.toLowerCase() !== trimmedName.toLowerCase());
      if (currentMedicineNames.length < initialLength) {
        saveMedicineNames(currentMedicineNames);
        loadMedicineOptions();
        alert(`Medicine "${trimmedName}" deleted successfully.`);
      } else {
        alert(`Medicine "${trimmedName}" not found in the list.`);
      }
    } else if (nameToDelete !== null) {
      alert("Please enter a medicine name to delete.");
    }
  }

  function addNewDosage() {
    const newDosage = prompt("Enter the new dosage:");
    if (newDosage && newDosage.trim() !== "") {
      const trimmedDosage = newDosage.trim();
      if (!dosageList.includes(trimmedDosage)) {
        dosageList.push(trimmedDosage);
        dosageList.sort();
        updateAllDosageDropdowns();
        alert(`New dosage "${trimmedDosage}" added successfully.`);
      } else {
        alert(`Dosage "${trimmedDosage}" already exists.`);
      }
    } else if (newDosage !== null){
      alert("Please enter a valid dosage.");
    }
  }

  function deleteDosage() {
    const dosageToDelete = prompt("Enter the exact dosage to delete:");
    if (dosageToDelete && dosageToDelete.trim() !== "") {
      const trimmedDosage = dosageToDelete.trim();
      const initialLength = dosageList.length;
      dosageList = dosageList.filter(dosage => dosage !== trimmedDosage);
      if (dosageList.length < initialLength) {
        updateAllDosageDropdowns();
        alert(`Dosage "${trimmedDosage}" deleted successfully.`);
      } else {
        alert(`Dosage "${trimmedDosage}" not found in the list.`);
      }
    } else if (dosageToDelete !== null) {
      alert("Please enter a dosage to delete.");
    }
  }

  function updateAllDosageDropdowns() {
    const allDosageSelects = document.querySelectorAll('.med-dose, .taper-dose');
    dosageList.sort();
    allDosageSelects.forEach(select => {
      const currentValue = select.value;
      select.innerHTML = dosageList.map(d => `<option value="${d}">${d}</option>`).join('');
      if (dosageList.includes(currentValue)) {
        select.value = currentValue;
      } else {
        select.selectedIndex = 0;
      }
    });
  }

  // --- Save & View Functions ---
  function savePrescription() {
    const prescription = collectPrescription();
    if (!prescription) return;

    updateHistory("pname", prescription.name);
    updateHistory("pdiagnosis", prescription.diagnosis);
    updateHistory("attender", prescription.attender);

    const allPrescriptions = JSON.parse(localStorage.getItem("prescriptions")) || [];
    allPrescriptions.push(prescription);
    localStorage.setItem("prescriptions", JSON.stringify(allPrescriptions));
    alert("‚úÖ Prescription saved successfully!");
    localStorage.removeItem("selectedPatient");
    window.location.href = "/prescriptions";
  }

  function saveAndViewPrescription() {
    const prescription = collectPrescription();
    if (!prescription) return;

    updateHistory("pname", prescription.name);
    updateHistory("pdiagnosis", prescription.diagnosis);
    updateHistory("attender", prescription.attender);

    const allPrescriptions = JSON.parse(localStorage.getItem("prescriptions")) || [];
    allPrescriptions.push(prescription);
    localStorage.setItem("prescriptions", JSON.stringify(allPrescriptions));
    localStorage.setItem("viewrx_index", allPrescriptions.length - 1);
    localStorage.removeItem("selectedPatient");
    window.location.href = "/patients-prescription";
  }

  function collectPrescription() {
    const name = document.getElementById("pname").value.trim();
    const mobile = document.getElementById("pmobile").value.trim();

    if (!name) {
      alert("Patient Name is required.");
      document.getElementById("pname").focus();
      return null;
    }
    if (!mobile) {
      alert("Mobile Number is required.");
      document.getElementById("pmobile").focus();
      return null;
    }

    const medicines = [];
    let medicineValid = true;
    document.querySelectorAll(".medicine-entry").forEach((entry, index) => {
      if (!medicineValid) return;

      const medName = entry.querySelector(".med-name").value.trim();
      if (!medName) {
        alert(`Medicine Name is required for entry #${index + 1}.`);
        entry.querySelector(".med-name").focus();
        medicineValid = false;
        return;
      }

      const tapering = [];
      let taperingValid = true;
      if (entry.querySelector('.tapering-checkbox').checked) {
        entry.querySelectorAll('.tapering-row').forEach((row, taperIndex) => {
          if (!taperingValid) return;

          const taperDays = row.querySelector('.taper-days').value;
          const taperDose = row.querySelector('.taper-dose').value;

          if (!taperDays || parseInt(taperDays) <= 0) {
            alert(`Valid number of days (> 0) is required for tapering step #${taperIndex + 1} in medicine entry #${index + 1}.`);
            row.querySelector('.taper-days').focus();
            taperingValid = false;
            return;
          }
          if (!taperDose) {
            alert(`Dosage is required for tapering step #${taperIndex + 1} in medicine entry #${index + 1}.`);
            row.querySelector('.taper-dose').focus();
            taperingValid = false;
            return;
          }
          tapering.push({
            dosage: taperDose,
            days: taperDays
          });
        });
      }

      if (!taperingValid) {
        medicineValid = false;
        return;
      }

      medicines.push({
        name: medName,
        type: entry.querySelector(".med-type").value,
        dosage: entry.querySelector(".med-dose").value,
        quantity: entry.querySelector(".med-qty").value || '0',
        remark: entry.querySelector(".med-remark").value,
        content: entry.querySelector(".med-content").value,
        tapering: tapering.length > 0 ? tapering : null
      });
    });

    if (!medicineValid) {
      return null;
    }

    if (medicines.length === 0) {
      if (!confirm("No medicines added. Do you want to save the prescription without medicines?")) {
        return null;
      }
    }

    return {
      name: name,
      phone: mobile,
      age: document.getElementById("page").value,
      diagnosis: document.getElementById("pdiagnosis").value.trim(),
      regno: document.getElementById("pregno").value.trim(),
      attender: document.getElementById("attender").value.trim(),
      spo2: document.getElementById("spo2").value,
      weight: document.getElementById("weight").value,
      bp: document.getElementById("bp").value,
      pulse: document.getElementById("pulse").value,
      temp: document.getElementById("temp").value,
      labtest: document.getElementById("labtest").value,
      labreport: document.getElementById("labreport").value,
      date: new Date().toISOString().slice(0, 10),
      medicines: medicines
    };
  }

  // --- History Update ---
  function updateHistory(fieldId, value) {
    if (!value || !fieldHistories[fieldId]) return;

    const historyKey = fieldHistories[fieldId];
    let history = JSON.parse(localStorage.getItem(historyKey) || "[]");

    if (!history.some(item => item.toLowerCase() === value.toLowerCase())) {
      history.push(value);
      if (history.length > 50) {
        history = history.slice(history.length - 50);
      }
      localStorage.setItem(historyKey, JSON.stringify(history));
    }
  }
</script>
</body>
</html>